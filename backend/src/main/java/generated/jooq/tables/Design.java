/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables;


import generated.jooq.DefaultSchema;
import generated.jooq.Keys;
import generated.jooq.tables.SubContainer.SubContainerPath;
import generated.jooq.tables.records.DesignRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Design extends TableImpl<DesignRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>design</code>
     */
    public static final Design DESIGN = new Design();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DesignRecord> getRecordType() {
        return DesignRecord.class;
    }

    /**
     * The column <code>design.id</code>.
     */
    public final TableField<DesignRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>design.image_id</code>.
     */
    public final TableField<DesignRecord, String> IMAGE_ID = createField(DSL.name("image_id"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>design.name</code>.
     */
    public final TableField<DesignRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>design.subcontainer_id</code>.
     */
    public final TableField<DesignRecord, String> SUBCONTAINER_ID = createField(DSL.name("subcontainer_id"), SQLDataType.VARCHAR(255), this, "");

    private Design(Name alias, Table<DesignRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Design(Name alias, Table<DesignRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>design</code> table reference
     */
    public Design(String alias) {
        this(DSL.name(alias), DESIGN);
    }

    /**
     * Create an aliased <code>design</code> table reference
     */
    public Design(Name alias) {
        this(alias, DESIGN);
    }

    /**
     * Create a <code>design</code> table reference
     */
    public Design() {
        this(DSL.name("design"), null);
    }

    public <O extends Record> Design(Table<O> path, ForeignKey<O, DesignRecord> childPath, InverseForeignKey<O, DesignRecord> parentPath) {
        super(path, childPath, parentPath, DESIGN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DesignPath extends Design implements Path<DesignRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DesignPath(Table<O> path, ForeignKey<O, DesignRecord> childPath, InverseForeignKey<O, DesignRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DesignPath(Name alias, Table<DesignRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DesignPath as(String alias) {
            return new DesignPath(DSL.name(alias), this);
        }

        @Override
        public DesignPath as(Name alias) {
            return new DesignPath(alias, this);
        }

        @Override
        public DesignPath as(Table<?> alias) {
            return new DesignPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DesignRecord> getPrimaryKey() {
        return Keys.DESIGN_PKEY;
    }

    @Override
    public List<ForeignKey<DesignRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DESIGN__FKCLBDYAR763QGTTQGL07TRGQG4);
    }

    private transient SubContainerPath _subContainer;

    /**
     * Get the implicit join path to the <code>sub_container</code> table.
     */
    public SubContainerPath subContainer() {
        if (_subContainer == null)
            _subContainer = new SubContainerPath(this, Keys.DESIGN__FKCLBDYAR763QGTTQGL07TRGQG4, null);

        return _subContainer;
    }

    @Override
    public Design as(String alias) {
        return new Design(DSL.name(alias), this);
    }

    @Override
    public Design as(Name alias) {
        return new Design(alias, this);
    }

    @Override
    public Design as(Table<?> alias) {
        return new Design(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Design rename(String name) {
        return new Design(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Design rename(Name name) {
        return new Design(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Design rename(Table<?> name) {
        return new Design(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Design where(Condition condition) {
        return new Design(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Design where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Design where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Design where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Design where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Design where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Design where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Design where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Design whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Design whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
