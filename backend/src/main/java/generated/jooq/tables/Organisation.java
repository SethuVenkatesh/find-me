/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables;


import generated.jooq.DefaultSchema;
import generated.jooq.Keys;
import generated.jooq.tables.Container.ContainerPath;
import generated.jooq.tables.records.OrganisationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Organisation extends TableImpl<OrganisationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>organisation</code>
     */
    public static final Organisation ORGANISATION = new Organisation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganisationRecord> getRecordType() {
        return OrganisationRecord.class;
    }

    /**
     * The column <code>organisation.id</code>.
     */
    public final TableField<OrganisationRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>organisation.created_at</code>.
     */
    public final TableField<OrganisationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>organisation.organisation_name</code>.
     */
    public final TableField<OrganisationRecord, String> ORGANISATION_NAME = createField(DSL.name("organisation_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>organisation.updated_at</code>.
     */
    public final TableField<OrganisationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private Organisation(Name alias, Table<OrganisationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Organisation(Name alias, Table<OrganisationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>organisation</code> table reference
     */
    public Organisation(String alias) {
        this(DSL.name(alias), ORGANISATION);
    }

    /**
     * Create an aliased <code>organisation</code> table reference
     */
    public Organisation(Name alias) {
        this(alias, ORGANISATION);
    }

    /**
     * Create a <code>organisation</code> table reference
     */
    public Organisation() {
        this(DSL.name("organisation"), null);
    }

    public <O extends Record> Organisation(Table<O> path, ForeignKey<O, OrganisationRecord> childPath, InverseForeignKey<O, OrganisationRecord> parentPath) {
        super(path, childPath, parentPath, ORGANISATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrganisationPath extends Organisation implements Path<OrganisationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrganisationPath(Table<O> path, ForeignKey<O, OrganisationRecord> childPath, InverseForeignKey<O, OrganisationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrganisationPath(Name alias, Table<OrganisationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrganisationPath as(String alias) {
            return new OrganisationPath(DSL.name(alias), this);
        }

        @Override
        public OrganisationPath as(Name alias) {
            return new OrganisationPath(alias, this);
        }

        @Override
        public OrganisationPath as(Table<?> alias) {
            return new OrganisationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<OrganisationRecord> getPrimaryKey() {
        return Keys.ORGANISATION_PKEY;
    }

    @Override
    public List<UniqueKey<OrganisationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK75MQVVOVNI3FVW96FU8HHD07B);
    }

    private transient ContainerPath _container;

    /**
     * Get the implicit to-many join path to the <code>container</code> table
     */
    public ContainerPath container() {
        if (_container == null)
            _container = new ContainerPath(this, null, Keys.CONTAINER__FKESG9E8BMX9BNU9557QAMULMO.getInverseKey());

        return _container;
    }

    @Override
    public Organisation as(String alias) {
        return new Organisation(DSL.name(alias), this);
    }

    @Override
    public Organisation as(Name alias) {
        return new Organisation(alias, this);
    }

    @Override
    public Organisation as(Table<?> alias) {
        return new Organisation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Organisation rename(String name) {
        return new Organisation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organisation rename(Name name) {
        return new Organisation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organisation rename(Table<?> name) {
        return new Organisation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organisation where(Condition condition) {
        return new Organisation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organisation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organisation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organisation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organisation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organisation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organisation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organisation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organisation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organisation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
